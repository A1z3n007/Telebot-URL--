import telebot
import requests

from types import SimpleNamespace

TOKEN = "YOU_API_TOKEN"
bot = telebot.TeleBot(TOKEN)
whitelist = ["TELEGRAM_ID_1", "TELEGRAM_ID_2"]

def bool_1(message):
    return str(message.chat.id) in whitelist

def welcome(message):
    user_id = str(message.chat.id)
    if user_id in whitelist:
        bot.send_message(message.chat.id, "‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!")
        return True
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return False

def process_article(message):
    art = message.text.strip()
    base_url = f"https://alm-basket-cdn-02.geobasket.ru/vol{art[0:4]}/part{art[0:6]}/{art}"

    info_url = f"{base_url}/info/ru/card.json"
    response = requests.get(info_url)
    if response.status_code == 200:
        data = response.json()
        bot.send_message(message.chat.id, f"üì¶ {data.get('imt_name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}")
        bot.send_message(message.chat.id, f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: {data.get('imt_id', '–ê—Ä—Ç–∏–∫—É–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}")
        bot.send_message(message.chat.id, f"üé® –¶–≤–µ—Ç: {data.get('nm_colors_names', '–¶–≤–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}")
        bot.send_message(message.chat.id, f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}")
        bot.send_message(message.chat.id, f"üìÇ –¢–∏–ø: {data.get('subj_name', '–¢–∏–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}")
        bot.send_message(message.chat.id, f"üè∑ –ë—Ä–µ–Ω–¥: {data.get('selling', {}).get('brand_name', '–ë—Ä–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ.")
        return

    price_url = f"{base_url}/info/price-history.json"
    response_2 = requests.get(price_url)
    if response_2.status_code == 200:
        data_2 = response_2.json()
        prices = []
        for item in data_2:
            try:
                rub_price = item["price"]["RUB"] // 100
                tg_price = rub_price * 6.4
                prices.append(round(tg_price))
            except (KeyError, TypeError):
                continue

        if prices:
            current_price = prices[-1]
            avg_price = sum(prices) / len(prices)
            if current_price < avg_price:
                level = "–¶–µ–Ω–∞ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π"
            elif current_price > avg_price:
                level = "–¶–µ–Ω–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π"
            else:
                level = "–¶–µ–Ω–∞ —Ä–∞–≤–Ω–∞ —Å—Ä–µ–¥–Ω–µ–π"
            bot.send_message(message.chat.id, (
                f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {round(avg_price)}‚Ç∏\n"
                f"üí∏ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}‚Ç∏\n"
                f"üìâ –£—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã: {level}"
            ))
        else:
            bot.send_message(message.chat.id, "‚ö† –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –ø—É—Å—Ç–∞ –∏–ª–∏ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω.")

    # --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤ ---
    details_url = f"https://card.wb.ru/cards/v2/detail?appType=1&curr=kzt&dest=269&spp=30&hide_dtype=10%3B13%3B14&ab_testing=false&lang=ru&nm={art}"
    response_3 = requests.get(details_url)

    if response_3.status_code == 200:
        try:
            json_data = response_3.json()
            product = json_data['data']['products'][0]

            rating = product.get('reviewRating', 'N/A')
            feedbacks = product.get('feedbacks', 'N/A')

            bot.send_message(message.chat.id, f"üìä –†–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞: {rating} ‚≠êÔ∏è\nüí¨ –û—Ç–∑—ã–≤–æ–≤: {feedbacks}")
        except Exception as e:
            print("Rating parse error:", e)
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–µ–π—Ç–∏–Ω–≥ –∏–ª–∏ –æ—Ç–∑—ã–≤—ã.")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞.")

    # --- –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ ---
    reviews_url = f"https://feedbacks1.wb.ru/feedbacks/v1/{art}?limit=3&skip=0"
    response_4 = requests.get(reviews_url)

    if response_4.status_code == 200:
        try:
            data_4 = response_4.json()
            reviews = data_4.get("feedbacks", [])
            if reviews:
                review_msgs = ["üó£ –û—Ç–∑—ã–≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π:"]
                for review in reviews:
                    text = review.get("text", "")
                    stars = review.get("productValuation", "")
                    review_msgs.append(f"‚≠ê {stars} ‚Äî {text[:120]}...")
                bot.send_message(message.chat.id, "\n\n".join(review_msgs))
            else:
                bot.send_message(message.chat.id, "–û—Ç–∑—ã–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        except Exception as e:
            print("–û—Ç–∑—ã–≤—ã –ø–∞—Ä—Å–∏–Ω–≥ –æ—à–∏–±–∫–∞:", e)
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã.")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É –æ—Ç–∑—ã–≤–æ–≤.")


@bot.message_handler(commands=['start'])
def start(message):
    welcome(message)

@bot.message_handler(content_types=['text'])
def on_text(message):
    if str(message.chat.id) in whitelist:
        process_article(message)
    else:
        welcome(message)

if __name__ == "__main__":
    bot.infinity_polling()
